---
- name: Update apt cache
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Install the required dependencies (Debian) python3
  apt:
    name:
      - openssl
      - python3-boto
      - python3-openssl
    state: present
  when:
    - ansible_os_family == 'Debian'
    - ansible_python_version is version('3', '>=')
    - ler53_install_requirements

- name: Create the directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ler_files_owner }}"
    group: "{{ ler_files_group }}"
    mode: 0700
  loop:
    - "{{ ler53_base_dir }}"
    - "{{ ler53_cert_dir }}"
    - "{{ ler53_account_key_dir }}"

- name: Generate the private key
  openssl_privatekey:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    size: "{{ ler53_key_size }}"

- name: Set the private key file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    owner: "{{ ler53_files_owner }}"
    group: "{{ ler53_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: Generate the CSR
  openssl_csr:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    privatekey_path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    common_name: "{{ ler53_cert_common_name }}"
    key_usage: "{{ ler53_cert_key_usages }}"
    subject_alt_name: "DNS:{{ ler53_cert_common_name }}{{ ',DNS:' + ',DNS:'.join(ler53_cert_sans) if ler53_cert_sans else '' }}"
    extended_key_usage: "{{ ler53_cert_extended_key_usages | default(omit) }}"
  register: generate_csr

- name: Set the CSR file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    owner: "{{ ler53_files_owner }}"
    group: "{{ ler53_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: Generate the Let's Encrypt account key
  openssl_privatekey:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    size: "{{ ler53_account_key_size }}"

- name: Set the Let's Encrypt account key file permissions
  file:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    owner: "{{ ler_files_owner }}"
    group: "{{ ler_files_group }}"
    mode: 0600

- name: Delete existing certificate
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    state: absent
  when: generate_csr.changed and ler53_new_cert_when_csr_changes

- name: Initiate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
    terms_agreed: yes
  register: lets_encrypt_challenge

- name: Create the DNS records for the challenge
  route53:
    command: create
    zone: "{{ ler53_route_53_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    ttl: 5
    value: '"{{ item.value[''dns-01''][''resource_value''] }}"'
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
    overwrite: yes
    wait: yes
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"

- name: Validate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    data: "{{ lets_encrypt_challenge }}"
  notify: handle services
  register: lets_encrypt_validation_result

- name: Set the ler53_cert_changed fact
  set_fact:
    ler53_cert_changed: "{{ lets_encrypt_validation_result.changed | bool }}"

- name: Delete the DNS records for the challenge
  route53:
    command: delete
    zone: "{{ ler53_route_53_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    ttl: 5
    value: '"{{ item.value[''dns-01''][''resource_value''] }}"'
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"

- name: Set the cert file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    owner: "{{ ler53_files_owner }}"
    group: "{{ ler53_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: Download the Let's Encrypt intermediate CA
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
    owner: "{{ ler53_files_owner }}"
    group: "{{ ler53_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: ler53_intermediate_download_task
  when: ler53_intermediate_download | bool

- name: Get content of the certificate
  command: "cat {{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
  register: ler53_certificate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: Get content of the intermediate CA
  command: "cat {{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
  register: ler53_intermediate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: Create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ ler53_certificate_content['stdout'] + '\n' + ler53_intermediate_content['stdout'] + '\n' }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_and_intermediate_file_name }}"
    owner: "{{ ler53_files_owner }}"
    group: "{{ ler53_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  when: ler53_intermediate_download | bool
